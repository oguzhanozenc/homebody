[
  {
    "title": "Demon Hunting: Combining the Science of Creativity with the Art of Bug Hunting",
    "author": "Offbeat Blog",
    "date": "2024-08-01T08:00:00.000Z",
    "thumbnail": "/img/demon-hunting-combining-the-science-of-creativity-with-the-art-of-bug-hunting.webp",
    "featuredText": "How can hundreds of security researchers review the same codebase and still miss critical issues reported by a few individuals as solo findings? The difference lies in our individual cognitive biases, mental shortcuts that shape our perception.¹ Our brains filter information to fit pre-existing narratives, a mechanism that evolved to prevent cognitive overload and maintain mental stability.² It’s necessary for survival. Without it, our cognitive capacity would become overwhelmed and we could quite literally go insane.",
    "content": "<p>To identify elusive bugs hiding in plain sight, we need to find ways to alter our perception and lift the veil of cognitive bias. In this article, I present methodologies designed to break through these self-imposed mental barriers and confront our personal inner demons. These techniques, which I call “Demon Hunting,” were developed through my own experimentation and incorporate insights from ancient spiritual practices to modern neuroscience. I have used demon hunting on security reviews to gain new perspectives on the code and uncover security vulnerabilities.</p>\n<br>\n\n<h4>D-Day: A full day of demon hunting</h4>\n<p>Demon hunting is a meld of brainstorming and code review that combines deep focus and creativity. A session consists of a loosely structured series of meditative, perceptual, and physical exercises that build on each other providing new perspectives and increasing the likelihood of creative breakthroughs.</p>\n<br>\n\n<p>As part of my security review process, I typically conduct a full-day demon hunting session. Not on every review, I usually reserve the approach for longer engagements of at least two weeks and for codebases of high complexity. So far, I have conducted over a dozen “D-Day” sessions which have yielded encouraging results:</p>\n<br>\n\n<ul>\n\n  <li>Over 60% of the sessions have resulted in uncovering one or more vulnerabilities on the actual D-Day.</li>\n\n<br>\n\n  <li>With one notable exception, all sessions have resulted in new findings over the course of the next four days following D-Day. These new findings may come from leads generated on D-Day or as a result of new insights and perspectives.</li>\n\n<br>\n\n  <li>Every D-Day has provided me with a much deeper understanding of the codebase. Using techniques like analogical thinking and code visualization, demon hunting provides new perspectives which can’t be obtained through traditional manual review of code and docs. This type of “multi-modal” learning significantly enhances comprehension and retention of complex concepts.⁴</li>\n\n</ul>\n\n<br>\n\n<img src=\"/img/demon-hunting-provides-new-perspectives.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Demon hunting provides new perspectives which can’t be obtained through traditional manual review.</small></div>\n\n<br>\n\n<h4>Prerequisites: Before the Hunt</h4>\n<p>A full day is a lot of time to spend during a time-boxed review. To maximize the results, careful planning is needed. Here are some important prerequisites for a successful D-Day:</p>\n<br>\n\n<p><strong>Know the Code:</strong> It’s imperative to have a solid understanding of the target codebase prior to demon hunting. You can’t hack the protocol if you don’t understand it.</p>\n<br>\n\n<p>I won’t start demon hunting until I am able to mentally step through each line of code for all major functions in my head, without looking. To prepare for this I sometimes quiz myself with Anki style flashcards in the days leading up to D-Day. If I find myself dreaming about the code, I know I’m ready.</p>\n<br>\n\n<p><strong>Not for beginners:</strong> For similar reasons, I don’t recommend a full day of demon hunting to beginners or newcomers in the space. It is not a magic solution or a substitute for security knowledge. It’s a technique designed to enhance existing intuition and develop new perspectives, enabling security researchers to apply their instincts in novel ways.</p>\n<br>\n\n<p><strong>Timing:</strong> There must be enough time <em><strong>after</strong></em> D-Day to follow up on leads and to allow new insights to become realized. I often hold D-Day on the Monday of the last week of an engagement. This allows adequate time to learn the codebase and leaves enough time afterwards for follow-up.</p>\n<br>\n\n<p><strong>Your Mood:</strong> If you are depressed, stressed, or in some sort of serious bad mood, you will not be having any creative breakthroughs that day.⁵</p>\n<br>\n\n<p>Earlier, I mentioned there was one notable exception to my success with demon hunting. It was a short review, and I wasn’t finding much. In a last-ditch attempt to find an issue, I held a demon hunting session on the final day of the engagement. It was a disaster resulting in zero new findings, my biggest failure with demon hunting ever.</p>\n<br>\n\n<p>If you find yourself in a similar situation, it’s probably best to cancel or delay D-Day until you are in a better place. Your time will be better spent doing something else.</p>\n<br>\n\n<p>The good news is that if you are just a little off, you can usually improve your mood by listening to your favorite song or recalling a fond memory.⁶ I keep a playlist of “happy songs” handy for this very reason.</p>\n<br>\n\n<img src=\"/img/happy-pharrell-williams.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Something as simple as listening to a happy song can have significant impact on your mood</small></div>\n\n<br>\n\n<h4>Prerequisites: Before the Hunt</h4>\n<p>D-Day is here. It’s Monday of the last week of the review. You’ve got the code down and you’re in a great mood.</p>\n<br>\n\n<p><strong>Be mentally prepared for the day</strong></p>\n<p>The following is meant to be a flexible template, not a rigid structure. This should be a day of hacking, diving into rabbit holes, and exploring new ideas. Always keep the primary objective in mind: “How can I hack the code?”</p>\n<br>\n\n<p>Be prepared to take notes. If you’re outside or walking around be sure to bring something to take written or voice notes.</p>\n<br>\n\n<p>And one last thing, lose your phone! Where we’re going, we won’t need it.</p>\n<br>\n\n<p><strong>D-Day schedule</strong></p>\n<img src=\"/img/schedule.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>The D-Day schedule consists of a series of alternating divergent and convergent thinking exercises, punctuated by meditation and physical movement. Divergent thinking is used to generate ideas and gain new perspectives, while convergent thinking is for logic, focus, and problem-solving</p>\n<br>\n\n<img src=\"/img/tree.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>To understand the reason for alternating between the two, we can imagine a tree. Divergent thinking is like growing new branches. Convergent thinking removes the less useful ideas like pruning branches from the tree. We can then generate new ideas from these curated paths and repeat the cycle. Unchecked divergent thinking can lead to wasted time on unproductive tangents. Creative breakthroughs come when convergent thinking identifies a novel solution from a set of ideas generated by divergent thinking.</p>\n<br>\n\n<img src=\"/img/ying-yang.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>While the D-Day schedule alternates between divergent and convergent thinking throughout the day, there’s an intentional emphasis on divergent thinking in the morning to generate a wide range of ideas and new perspectives on the codebase. In the afternoon, the focus shifts towards convergent thinking, applying the morning’s creative insights to methodically search for security issues and bugs.</p>\n<br>\n\n<p>Got it? Let’s hunt some demons!</p>\n<br>\n\n<img src=\"/img/hunting-demons.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p><strong>First order of business, NO COFFEE!</strong></p>\n<p>Caffeine does not help with the divergent thinking process.⁷ Some neuroscientists believe it negatively impacts divergent thinking⁸ which is the primary focus of this morning. We’ll skip coffee for now.</p>\n<br>\n\n<p><strong>7:00am Meditate — Yoga Nidra and Open Monitoring</strong></p>\n<p>To prepare for the day ahead and activate the neural pathways associated with creative thinking, I start with an extended meditation session consisting of Yoga Nidra and open monitoring.</p>\n<br>\n\n<p>Yoga Nidra is a form of guided meditation that induces a state of conscious awareness. This spiritual practice dates back to India over 3,000 years ago. One session of Yoga Nidra can increase dopamine levels by as much as 65% in the neural pathways used during creative problem solving.⁹</p>\n<br>\n\n<p>Open monitoring is another type of meditation dating far back in Vedic, Buddhist and Chinese traditions. It involves non-reactive awareness of all experiences in the present moment, observing thoughts, feelings, and sensations without judgment. Studies have shown that this type of eyes-closed meditation enhances divergent thinking by promoting cognitive flexibility.¹⁰ In other words, it helps tear down those mental blocks and allows new ideas to surface.</p>\n<br>\n\n<p>To start off D-Day, I do 10 minutes of Yoga Nidra, followed by 30 minutes of open monitoring meditation, followed by another 20 minutes of Yoga Nidra.</p>\n<br>\n\n<p><strong>8:00 Convergent — Review the code</strong></p>\n<p>Use this time to set the context for the day. Review major workflows, entry points, invariants, code assumptions, diagrams, and anything important to keep top of mind throughout the day.</p>\n<br>\n\n<p><strong>8:30 Divergent — Mind Map</strong></p>\n<p>This is the first divergent exercise of the day and one of my favorites. There’s really no wrong way to do it. Be creative. You don’t have to draw each contract. You can base it on workflows, actors, or whatever you feel inspired to do. The internet has plenty of videos about mind-mapping (see this, this, and this). If you’re having trouble starting, don’t be afraid to draw something quick and messy — you can always redraw it.</p>\n<br>\n\n<img src=\"/img/mindmaps.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Mind maps</small></div>\n\n<br>\n\n<p><strong>9:15 Motion — Go for a walk</strong></p>\n<p>The brain’s nigrostriatal pathways engaged during divergent thinking are also activated during physical motion like walking, running, or pacing. This is the reason so many people have creative breakthroughs when they’re doing these activities. Take a stroll, run around the block, or just pace about for a bit</p>\n<br>\n\n<p><strong>9:30 Divergent — SWOT Analysis</strong></p>\n<p>SWOT analysis is a technique commonly taught in business schools, but I’ve found it valuable for examining smart contract systems. By evaluating a codebase’s strengths, weaknesses, opportunities, and threats, you’re forced to think of the code in new ways.</p>\n<br>\n\n<p>You can research how to do it, but it’s really as simple as creating a list with the following categories:</p>\n<br>\n\n<ul>\n\n  <li>Strengths: What the code does well</li>\n\n<br>\n\n  <li>Weaknesses: What it doesn’t do well</li>\n\n<br>\n\n  <li>Opportunities: Areas for improvement</li>\n\n<br>\n\n  <li>Threats: External threats or risks</li>\n\n<br>\n\n</ul>\n\n<br>\n\n<p><strong>10:00 Convergent — Review</strong></p>\n<p>This is an opportunity for some focused convergent thinking. Review the results of the mind map and SWOT exercises. Look back to the code with a fresh perspective. What have we learned that can help us hack this protocol?</p>\n<br>\n\n<p><strong>10:30 Divergent — Analogical Thinking</strong></p>\n<p>This is one of my favorite exercises and has probably led to more findings than anything else. It’s simple: create an analogy of what the code does to something familiar in real life.</p>\n<br>\n\n<p>Let’s say you’re reviewing a NFT lending protocol that reminds you of a pawn shop. Pawn shops accept different kinds of collateral to secure short term loans. What do we know about pawn shops that we can apply to this protocol? We know that after a certain time they can sell the collateral if the loan hasn’t been paid. Maybe this protocol should have a similar concept of loan expiration. What does it risk by not following the pawn shop model? Maybe there’s a finding there.</p>\n<br>\n\n<p>I usually generate multiple analogies during this time. I consider the protocol as a whole as well as individual components or features.</p>\n<br>\n\n<img src=\"/img/longwalk.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p><strong>11:00 Motion — Long walk</strong></p>\n<p>Time for the longest walk (or run if you’re a runner) of the day. If you are unable to go outside, then pacing indoors also works. Be sure to have some way to take notes when inspiration hits.</p>\n<br>\n\n<p><strong>12:00 Convergent — Review (and lunch)</strong></p>\n<p>Now is the time to write up thoughts from the walk, review the day’s progress, and look back at the code with a fresh perspective. Stay curious. Question assumptions. Enter rabbit holes.</p>\n<br>\n\n<p>Eat some lunch if that’s your thing. If I do eat, I keep it light and stick to natural, whole foods.</p>\n<br>\n\n<p><strong>1:00 Meditate — Focused Attention (and coffee)</strong></p>\n<p>To kick off the convergent thinking phase, I usually do about 20 minutes of “focused attention” meditation. There are many variations of this ancient practice such as keeping your mind clear, following your breath, counting, and repeating a mantra. This type of meditation is shown to activate the mesocortical pathway which facilitates convergent thinking.¹¹</p>\n<br>\n\n<p>Coffee is optional, but if you are a coffee enjoyer like me, caffeine supports convergent thinking.¹²</p>\n<br>\n\n<p><strong>1:30 Convergent — Checklists</strong></p>\n<p>It’s time to dig in and find some bugs. I often use this slot to review my collection of security checklists for inspiration. I also spend a lot of time reviewing the code. With the mesocortical pathway full of dopamine for the first time all day, there’s a real chance of uncovering a new finding during this time.</p>\n<br>\n\n<p><strong>2:30 Divergent — Game Time</strong></p>\n<p>It’s time for “category cards”. I usually deal myself two or three cards and try to think of ways to relate them to the codebase. This is something I’ve added to the routine recently. To be honest I find it quite difficult and that is why I have kept it in. It forces me to think — it actually makes me uncomfortable because it’s so hard. How in the world do I relate a Panda to a lending protocol? <em>The protocol’s governance process is reminiscent of the panda’s slow, deliberate…er…mating rituals?</em></p>\n<br>\n\n<img src=\"/img/gametime.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Pro-tip: I’ve found this exercise more fun to play with friends in the chat.</small></div>\n\n<br>\n\n<p><strong>3:00 Motion — Yoga</strong></p>\n<p>Keep it moving. Keep those neurons firing! I either go for a short walk or do a quick yoga session during this slot. Yoga engages the brain’s default mode network¹³ which also plays a part in creativity.</p>\n<br>\n\n<p><strong>3:15 Convergent — Generate attack vectors</strong></p>\n<p>Review insights from the day. How should these new ideas affect how I spend the rest of my time on the review? Is there anything I should focus more (or less) time on? I also use this slot to generate leads and attack vectors to test.</p>\n<br>\n\n<p><strong>4:15 Motion — Touch grass!</strong></p>\n<p>This is the last physical exercise of the day and can often result in creative breakthroughs. In my experience, this has been one of the most fruitful times for having an “a-ha” moment. Weather permitting, I like to walk barefoot in the grass for this.</p>\n<br>\n\n<p><strong>4:45 Convergent — Final review, wind down</strong></p>\n<p>This is time to organize notes, review and reflect. I create a summary of the results of the day’s exercises. TODO: Sleep early tonight!</p>\n<br>\n\n<h4>Go forth and hunt demons!</h4>\n<p>I hope this can serve as inspiration for your next code review. Remember, the demon hunting “schedule” is really a flexible template. I’ve shared some of the divergent thinking exercises that work well for me, but there are many more to explore. Feel free to adapt and experiment with the approach to suit your needs and preferences. Although I’ve designed the full day D-Day routine to maximize the compounding benefits of alternating exercises, many of these techniques are valuable even when used in isolation.</p>\n<br>\n\n<p>Demon hunting has potential applications beyond security reviews. Bounty hunting and contests are obvious fits. I also believe developers will find it useful at various stages of the development cycle. While there’s no guarantee that demon hunting will always uncover new vulnerabilities, it consistently offers new perspectives and a deeper understanding of the code under review.</p>\n<br>\n\n<p>I could nerd out on this subject all day but will stop here. Before we conclude, there are a few key points worth reviewing that you can apply in your everyday life:</p>\n<br>\n\n<ul>\n\n  <li>Remember your mood plays a significant role in the outcome of your creative endeavors. Not just for demon hunting, but any creative exercise you attempt will be greatly affected by your mental state.</li>\n\n<br>\n\n  <li>Don’t forget to hold off on coffee prior to brainstorming and other creative tasks that require divergent thinking.</li>\n\n<br>\n\n  <li>Check out this <a href=\"https://www.youtube.com/watch?v=AKGrmY8OSHM\" target=\"_blank\">10 minute NSDR video from Huberman</a>. I practice this almost every day and it has been a game changer for me. Next time you’re feeling tired in the afternoon, give this a try. It’s more effective than a double espresso! </li>\n\n<br>\n\n  <li>If you’re interested in learning more, I’ve provided citations and further reading suggestions below for the concepts discussed throughout this article.</li>\n\n<br>\n\n  <li>I also highly recommend watching this Huberman Lab pod which touches on many of the concepts in this article. <a href=\"https://www.youtube.com/watch?v=KPlJcD-o-4Q\" target=\"_blank\">The Science of Creativity & How to Enhance Creative Innovation | Huberman Lab Podcast 103</a></li>\n\n</ul>\n\n<br>\n\n<p>Hope you enjoyed reading this as much as I did writing it. If you’re interested in chatting more about demon hunting and other experimental security practices, head over to the <a href=\"https://discord.com/invite/e4cbyyUBbu\">Offbeat Blog discord server</a> and join the #demonhunters channel now!</p>\n<br>\n\n<img src=\"/img/demon-and-hunter.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<h4>Thank you 🙏</h4>\n<p>Thank you to everyone who’s listened to my crazy ideas, kept a straight face, and given thoughtful responses. Thank you to the bold few who’ve dared join me on demon hunting excursions. Thank you to those who have mentored and advised me along the way. I feel so lucky to work in an industry full of generous, caring, and giga-intelligent people who genuinely wish to improve the security of the space.</p>\n<br>\n\n<p>Thanks to all those that gave feedback on this post. This is the result of iteration with many thoughtful and helpful friends. The original draft was an incomprehensible garbled mess compared to this.</p>\n<br>\n\n<div style=\"display: flex; flex-wrap: wrap; gap: 5px;\">\n\n<p>Shout outs to:</p>\n\n<p>  <a href=\"<link>\" style=\"text-decoration: none; color: inherit;\">@0xicingdeath</a></p>\n<p>  <a href=\"https://x.com/@technovision99\" style=\"text-decoration: none; color: inherit;\">@technovision99</a></p>\n<p>  <a href=\"https://x.com/@usmannk\" style=\"text-decoration: none; color: inherit;\">@usmannk</a></p>\n<p>  <a href=\"https://x.com/lovethewired\" style=\"text-decoration: none; color: inherit;\">@lovethewired</a></p>\n<p>  <a href=\"https://x.com/@usmannk\" style=\"text-decoration: none; color: inherit;\">@usmannk</a></p>\n<p>  <a href=\"https://x.com/@cmichelio\" style=\"text-decoration: none; color: inherit;\">@cmichelio</a></p>\n<p>  <a href=\"https://x.com/0xKaden\" style=\"text-decoration: none; color: inherit;\">@0xKaden</a></p>\n<p>  <a href=\"https://x.com/marqymarq10\" style=\"text-decoration: none; color: inherit;\">@marqymarq10</a></p>\n<p>  <a href=\"https://x.com/Tuturutech\" style=\"text-decoration: none; color: inherit;\">@Tuturutech</a></p>\n<p> <span style=\"margin-left: 10px;\">@0xOwenThurm<span></p>\n<p> <span style=\"margin-left: 10px;\">@zachobront<span></p>\n<p> <span style=\"margin-left: 10px;\">Madness</span></p>\n</div>\n\n<br>\n\n<h4>Sources and Further Reading</h4>\n<p>¹ Tversky, A., Kahneman, D. Judgment under uncertainty: Heuristics and biases. Science 185, 4157 (1974), 1124–1131.</p>\n<br>\n\n<p>Silverman, B.G. Critiquing human judgment using knowledge-acquisition systems. AI Mag. 11, 3 (1990), 60.</p>\n<br>\n\n<p>Iflaah Salman, “Cognitive biases in software quality and testing,” ICSE ’16: Proceedings of the 38th International Conference on Software Engineering Companion, May 2016, pp. 823–826, doi:10.1145/2889160.2889265, published May 14, 2016, <a href=\"https://dl.acm.org/doi/abs/10.1145/2889160.2889265\">https://dl.acm.org/doi/abs/10.1145/2889160.2889265</a>.</p>\n<br>\n\n<p>Souti Chattopadhyay, Nicholas Nelson, Audrey Au, Natalia Morales, Christopher Sanchez, Rahul Pandita, and Anita Sarma, “Cognitive Biases in Software Development,” Communications of the ACM, April 1, 2022, <a href=\"https://cacm.acm.org/research/cognitive-biases-in-software-development/#R17\">https://cacm.acm.org/research/cognitive-biases-in-software-development/#R17</a>.</p>\n<br>\n\n<p>² For a larger discussion on this issue, see Daniel Kahneman, Thinking, Fast and Slow (Farrar, Straus and Giroux, 2011).</p>\n<br>\n\n<p>³ Daniel J. Levitin, The Organized Mind: Thinking Straight in the Age of Information Overload (Dutton, 2014);</p>\n<br>\n\n<p>John Sweller, “Cognitive Load Theory,” Psychology of Learning and Motivation, vol. 55, 2011, pp. 37–76.</p>\n<br>\n\n<p>⁴ Multi-Modal Learning: “The Effectiveness of Different Learning Methods on Knowledge Retention” by Linda S. Smith, Cognitive Science Review, 2019. Cognitive Science Review, Vol. 18, №2, 2019</p>\n<br>\n\n<p>Learning Through Various Methods: “Understanding the Impact of Diverse Learning Techniques on Cognitive Load and Retention” by James A. Clark, Journal of Applied Learning, 2021. Journal of Applied Learning, Vol. 15, №1, 2021</p>\n<br>\n\n<p>⁵ Byron, K., &amp; Khazanchi, S. (2011). The Link Between Creativity, Cognition, and Creative Drives and Underlying Neural Mechanisms. Frontiers in Psychology.</p>\n<br>\n\n<p>Lehrer, J. (2010). How Your Mood Affects Your Creativity. Big Think.</p>\n<br>\n\n<p>Beeman, M., &amp; Kounios, J. (2010). The eureka factor: Aha moments, creative insight, and the brain. Journal of Creative Behavior. Retrieved from Journal of Creative Behavior.</p>\n<br>\n\n<p>⁶ Ferguson, Y. (2013). Trying to be Happier Works When Listening to Upbeat Music, According to MU Research. University of Missouri. Retrieved from University of Missouri.</p>\n<br>\n\n<p>Ritter, S. M., &amp; Mostert, N. (2016). Happy creativity: Listening to happy music facilitates divergent thinking. PLOS ONE. Retrieved from PLOS ONE.</p>\n<br>\n\n<p>⁷ Smith, J., &amp; Brown, A. (2020). Percolating ideas: The effects of caffeine on creative thinking and problem solving. Consciousness and Cognition, 79, 102899. doi:10.1016/j.concog.2020.102899.</p>\n<br>\n\n<p>⁸ Why Andrew Recommends Avoiding Caffeine Before Divergent Thinking Sessions <a href=\"https://podclips.com/ct/why-andrew-recommends-avoiding-caffeine-before-divergent-thinking-sessions\">https://podclips.com/ct/why-andrew-recommends-avoiding-caffeine-before-divergent-thinking-sessions</a></p>\n<br>\n\n<p>⁹ Kjaer, T. W., Bertelsen, C., Piccini, P., Brooks, D., Alving, J., &amp; Lou, H. C. (2002). Increased dopamine tone during meditation-induced change of consciousness. Brain Research Cognitive Brain Research, 13(2), 255–259. doi: 10.1016/s0926–6410(01)00106–9.</p>\n<br>\n\n<p>Pandi-Perumal, S. R., Spence, D. W., Srivastava, N., Kanchibhotla, D., Kumar, K., Sharma, G. S., Gupta, R., &amp; Batmanabane, G. (2022). The Origin and Clinical Relevance of Yoga Nidra. Sleep Vigil, 6(1), 61–84. doi: 10.1007/s41782–022–00202–7.</p>\n<br>\n\n<p>¹⁰ Colzato, L. S., Ozturk, A., &amp; Hommel, B. (2012). Meditate to Create: The Impact of Focused-Attention and Open-Monitoring Training on Convergent and Divergent Thinking. Frontiers in Psychology, 3, 116. doi: 10.3389/fpsyg.2012.00116.</p>\n<br>\n\n<p>¹¹ Colzato, L. S., Ozturk, A., &amp; Hommel, B. (2012). Meditate to Create: The Impact of Focused-Attention and Open-Monitoring Training on Convergent and Divergent Thinking. Frontiers in Psychology, 3, 116. doi: 10.3389/fpsyg.2012.00116.</p>\n<br>\n\n<p>¹² Smith, J., &amp; Brown, A. (2020). Percolating ideas: The effects of caffeine on creative thinking and problem solving. Consciousness and Cognition, 79, 102899. doi:10.1016/j.concog.2020.102899.</p>\n<br>\n\n<p>¹³ Santaella, D. F., Balardin, J. B., Afonso, R. F., Giorjiani, G. M., Sato, J. R., Lacerda, S. S., Amaro Jr, E., Lazar, S., &amp; Kozasa, E. H. (2019). Greater Anteroposterior Default Mode Network Functional Connectivity in Long-Term Elderly Yoga Practitioners. Frontiers in Aging Neuroscience, 11, 158. <a href=\"https://doi.org/10.3389/fnagi.2019.00158\">https://doi.org/10.3389/fnagi.2019.00158</a>&quot;</p>\n",
    "tags": [
      "Security Review",
      "Creativity",
      "Code Review",
      " Neuroscience",
      "Blockchain"
    ]
  },
  {
    "title": "Don’t be a ball breaker, be a Wall Breaker!",
    "author": "Offbeat Blog",
    "date": "2024-07-15T20:00:00.000Z",
    "thumbnail": "/img/wallbreakers.webp",
    "featuredText": "What do serial killers in the 70s and blockchain security have in common?\n\nThe Zodiac Killer, BTK, and the Golden State Killer are just a few of the dozens of serial killers who operated with seeming impunity in the U.S. during the 1970s. This era exposed critical flaws in law enforcement due to lack of collaboration, with thousands of siloed, independent agencies rarely sharing information with each other. Killers exploited jurisdictional boundaries, effectively resetting investigations as they moved. This fragmented approach often left crucial connections undiscovered, allowing criminals to continue their sprees unchecked.",
    "content": "<img src=\"/img/wanted-zodiac.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>Today’s blockchain security landscape faces similar challenges. Security providers all participate in the zero-sum game of trying to land clients from the same pool. Most security providers aggressively isolate themselves and avoid sharing their “secrets” with others. While there are examples of knowledge sharing within the community (blog posts, exploit write-ups, etc.), instances of actual collaboration are hard to find, almost non-existent. Sure, everybody wants to be an influencer and “collaborate,” but their idea of collaboration often means “you collaborate with me” and not the other way around.</p>\n<br>\n\n<h4>What?</h4>\n<p>Wall Breakers is a new initiative that provides opportunities for security researchers to participate in “mini-sabbaticals” within the crypto community.</p>\n<br>\n\n<h4>Why?</h4>\n<p>The main goal of the program is to share knowledge in an effort to strengthen the security of the blockchain while increasing collaboration. The unique model allows for many different types of exchanges which can be funded in multiple ways.</p>\n<br>\n\n<h4>Who?</h4>\n<p>Security researchers called “guests” participate in a fixed-duration “exchange” with a “host.” The host is an organization such as a protocol, a DAO, or another security provider.</p>\n<br>\n\n<h4>How?</h4>\n<p>The exchange is organized by the host. We help the hosts select and vet the security researcher guests. Funding can come from the host, the guest, or the community.</p>\n<br>\n\n<p>We’ve spoken with a lot of people about this, and one common response we get is, “We have limited resources and it might be hard to get funding for an exchange like this.”</p>\n<br>\n\n<p>No problem! The exchanges doesn’t have to be funded by the host — it can also be funded by the guest’s organization, or through contributions from the community. The important thing is the knowledge sharing with each other and with the community. Get involved! Let us figure out the funding.</p>\n<br>\n\n<h4>Gimme an example!</h4>\n<p><em>A security engineer spends a week with a protocol team preparing for an upcoming external security review.</em> This is a great example of knowledge sharing as a lot of security researchers haven’t experienced what it is like from “the other side.”</p>\n<br>\n\n<p>I’ve heard security researchers ask questions like, “Why doesn’t the protocol just freeze the commit two weeks before the audit to spend that time cleaning up the documentation and creating helpful exhibits for the auditors?” As any protocol team can tell you, it just doesn’t work that way. So many issues come up for a million different reasons. Usually devs are scrambling right up to the last minute to prepare for the audit.</p>\n<br>\n\n<p>Gaining this type of perspective can go a long way for a security researcher, and the protocol team benefits through new insights on how to improve their pre-audit procedures.</p>\n<br>\n\n<p>Other examples:</p>\n<ul><li>A fuzzing specialist works with a dev team to upgrade a test framework and experiences firsthand the real-world challenges involved.</li>\n\n<br>\n\n<li>A bounty hunter who has always wanted to see what an audit is like joins a security firm as a guest.</li>\n\n<br>\n\n<li>A security researcher from Security Company X (or independent) does an audit with Security Company Y.</li>\n\n</ul>\n\n<br>\n\n<p>The opportunities are limitless!</p>\n<br>\n\n<img src=\"/img/morty.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<h4>You son of a bitch, I’m in!</h4>\n<p>How can I get involved? The program is new; we are just starting out. The first pilot exchange has concluded — a phenomenal success (more on that soon). We are planning the next exhanges. We’re looking for hosts and security researchers interested in new experiences, sponsors who believe in the benefits of collaboration, and volunteers who can help us out. If any of this is you, please head over to the <strong>Wall Breakers</strong> channel in the <a href=\"https://discord.com/invite/cqgcSbeTBA\">Offbeat Discord</a></p>\n",
    "tags": []
  },
  {
    "title": "Quantifying Complexity in Smart Contracts: The Adventures of Uncle Bob and the Clean Code Crew",
    "author": "Offbeat Blog",
    "date": "2024-06-10T20:00:00.000Z",
    "thumbnail": "/img/quantifying-complexity-featuredimg.webp",
    "featuredText": "Quantifying code complexity is…complex. When it comes to smart contracts, especially Solidity contracts, it’s even more challenging due to considerations like immutability, composability, and gas optimization. ",
    "content": "<p>In this post, we look at three metrics historically used to assess the complexity and risk of enterprise applications. With the help of <a href=\"https://github.com/crytic/slither?tab=readme-ov-file#printers\">Slither printers</a>, we will use these complexity measurements on well-known Solidity codebases <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/master/contracts\">OpenZeppelin</a>, <a href=\"https://github.com/transmissions11/solmate\">Solmate</a>, and <a href=\"https://github.com/Uniswap/v3-core/tree/main/contracts\">UniswapV3</a>.</p>\n<br>\n\n<h4>Alright I’ll bite, what’s a Slither printer?</h4>\n<p>Before we talk about complexity, let’s talk briefly about <a href=\"https://x.com/devtooligan/status/1629212278070595584\">Slither printers</a>. Slither printers are data visualization tools that plug directly into the Slither API. They give you the power to slice and dice a codebase any way you want. I often use them to get an overview of a new codebase or when looking for specific information such as a contract’s entry points or storage writes.</p>\n<br>\n\n<p>The printers themselves are easy to create and offer a lot of flexibility.</p>\n<br>\n\n<img src=\"/img/modifiers-snippet.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Snippet from the <a href=\"https://github.com/crytic/slither/blob/master/slither/printers/summary/modifier_calls.py\" target=\"_blank\">modifiers</a> printer.</small></div>\n\n<br>\n\n<img src=\"/img/print-clarg.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Run selected printers by passing the —  <strong>print</strong> clarg.</small></div>\n\n<br>\n\n<img src=\"/img/modifiers-result.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Results of the “modifiers” printer run on <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol\" target=\"_blank\">OpenZeppelin’s UUPSUpgradeable contract</a></small></div>\n\n<br>\n\n<p>In this post we will use three printers: <strong>ck</strong>, <strong>martin</strong>, and <strong>halstead</strong> to calculate the metrics on some well-known Solidity codebases. Now that you know what printers are, let’s dive into some complexity metrics.</p>\n<br>\n\n<h4>McCabe’s Cyclomatic Complexity</h4>\n<img src=\"/img/star-wars-meme.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>This article will not focus on <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">McCabe’s cyclomatic complexity</a>, a metric that measures the number of linearly independent paths through a function.</p>\n<br>\n\n<p>Cyclomatic complexity is commonly used outside of web3, in fact, I would almost call it mainstream. But, in my experience, <em>cyclomatic complexity doesn’t translate well to Solidity smart contracts</em>. Part of the reason is because factors such as inheritance and coupling are more impactful drivers of complexity in Solidity. Additionally, due to design constraints like the Spurious Dragon limit, smart contract functions tend to be simpler with less branching so cyclomatic complexities are consistently lower.</p>\n<br>\n\n<p>We won’t be discussing it here, but if you’re interested in learning more about cyclomatic complexity, there’s <a href=\"https://www.geeksforgeeks.org/cyclomatic-complexity/\">plenty of information</a> available. There’s even a <a href=\"https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity\">Slither printer</a> for it.</p>\n<br>\n\n<p>Next up, we begin our deep dive on the three metrics highlighted in this article: CK, Martin, and Halstead.</p>\n<br>\n\n<p><em>Note:</em> The following discussions are technical and may be a bit dry for some readers. If you’d prefer to skip ahead to the more interesting conclusions, scroll to the <strong>Putting it all together</strong> section below.</p>\n<br>\n\n<p>Now, let’s dive into the first set of complexity metrics.</p>\n<br>\n\n<h4>Nothing comes between me and my CK.</h4>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Programming_complexity\">CK metrics</a> were developed in the 90s by Shyam Chidamber and Chris Kemerer. They focus primarily on the structural attributes of classes and their relationships within a software system. The calculated metric values estimate the risk associated with specific parts of a codebase in an attempt to identify potential design flaws, maintainability issues, or areas that require refactoring.</p>\n<br>\n\n<img src=\"/img/slither.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>One nice thing about the Slither CK printer is that it provides some additional tables with helpful information about the contracts like number of storage variables and state mutating functions.</p>\n<br>\n\n<img src=\"/img/ck-complexity-metrics.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<img src=\"/img/ck-complexity-metrics-2.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>The actual CK metrics are found in the last table:</p>\n<br>\n\n<img src=\"/img/results-of-the-ck.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Results of the “ck” printer run on <a href=\"https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\" target=\"_blank\">Solmate contracts</a></small></div>\n\n<br>\n\n<p><strong>Response For a Class (RFC):</strong> <em>Number of external functions + number of external contracts</em> <em>called</em>. This metric gives a sense of complexity in terms of interactions and potential responses to external stimuli. For example, the ERC4626 contract has a much higher RFC than the ERC20 contract because it has a lot more external functions.</p>\n<br>\n\n<p><strong>Number of Children (NOC):</strong> <em>Number of immediate child contracts</em>. This metric counts the number of direct descendant contracts.</p>\n<br>\n\n<p><strong>Depth of Inheritance Tree (DIT):</strong> <em>Number of levels of inheritance to the most distant ancestor.</em> The DIT values in the example above tend to be low which is expected since Solmate contracts are generally flatter and don’t offer as many variations. Whereas the DIT values on OpenZeppelin contracts can get as high as 4 or 5. Fun fact: “đít” means “butt” in Vietnamese.</p>\n<br>\n\n<p><strong>Coupling Between Object Classes (CBO):</strong> <em>Number of dependents + number of dependencies.</em> A “dependent” is a contract that calls the target contract, and a “dependency” is a contract that the target contract calls. These are the same ways we will define Martin’s concepts of Afferent Coupling (Ca) and Efferent Coupling (Ce) discussed in the next section.</p>\n<br>\n\n<p>Inheritance, coupling, and cohesion, the specific attributes measured by the CK metrics, are all directly relevant to smart contract systems. Deeply nested <strong>inheritance</strong> structures in Solidity can be a primary obfuscator to finding security issues. <strong>Coupling,</strong> via excessive calls to other contracts within the system, can also hinder readability and hide certain categories of bugs. <strong>Cohesion,</strong> as described by “Uncle Bob” in the <a href=\"https://en.wikipedia.org/wiki/Single-responsibility_principle\">Single-responsibility principle</a>, is a key factor used to assess the complexity management category on the <a href=\"https://github.com/crytic/building-secure-contracts/blob/master/development-guidelines/code_maturity.md#complexity-management\">Trail of Bits — Code Maturity Table</a>.</p>\n<br>\n\n<p>Speaking of Uncle Bob, let’s talk about the man himself, and the metrics he created.</p>\n<br>\n\n<h4>The Martin Metrics</h4>\n<img src=\"/img/uncle-bob.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small><a href=\"https://x.com/unclebobmartin\" target=\"_blank\">Uncle Bob on Twitter</a></small></div>\n\n<br>\n\n<p>Robert Martin, affectionately known as ‘Uncle Bob,’ is a self-taught software engineer who entered the field as a teenager in the 1970s, a time when most software engineers were academics and long before teenage devs in crypto became the norm. Passionate about security, he established many core software design principles you are undoubtedly familiar with today. He was one of the first to advocate for <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven development (TDD)</a>, he created the <a href=\"https://en.wikipedia.org/wiki/Single-responsibility_principle\">Single-responsibility principle</a>, and he was a co-author of the <a href=\"https://en.wikipedia.org/wiki/Agile_software_development#The_Agile_Manifesto\">Agile Manifesto</a> which, love it or hate it, has been highly influential on the software industry over the past quarter century.</p>\n<br>\n\n<img src=\"/img/slither-print-martin.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>The Slither <strong>martin</strong> printer uses some of Bob’s main metrics for quantifying complexity. Two of the key components of these metrics are the contracts’ dependents and the dependencies, which he refers to as Afferent Coupling (Ca) and Efferent Coupling (Ce) respectively.</p>\n<br>\n\n<p>In addition, the Martin metrics include a concept of Abstractness which can be directly applied to abstract contracts in Solidity.</p>\n<br>\n\n<img src=\"/img/results-of-the-martin.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Results of the “martin” printer run on <a href=\"https://github.com/Uniswap/v3-core/tree/main/contracts\" target=\"_blank\">UniswapV3 core contracts</a></small></div>\n\n<br>\n\n<p><strong>Afferent Coupling (Ca):</strong> <em>Number of dependents</em>. A “dependent” is a contract that calls the target contract. Looking at the UniV3 results above the FullMath library is used by the most other contracts.</p>\n<br>\n\n<p><strong>Efferent Coupling (Ce):</strong> <em>Number of dependencies</em>. A “dependency” is a contract that the target contract calls. In the example above, the pool contract has no dependents but it has 16 dependencies meaning it calls on the other contracts more than it gets called. The results here would change if we included the periphery contracts in the computation.</p>\n<br>\n\n<p><strong>Instability (I):</strong> <em>Ce / (Ce + Ca) Ratio of efferent coupling to total coupling.</em> The more dependencies a contract has, the greater the chance that contract will have to be changed in the future because one of the dependencies changed. This metric helps identify which contracts require change more often.</p>\n<br>\n\n<p><strong>Abstractness (A):</strong> <em>Number of abstract contracts / total number of contracts.</em> Junior devs preach DRY (Don’t Repeat Yourself). Senior devs know <a href=\"https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase\">WET code</a> is based.</p>\n<br>\n\n<p><strong>Distance from the Main Sequence (D):</strong> <em>abs(A + I — 1).</em> This one has a bit of an odd name. The goal is to identify contracts that are too far away from the “expected” ratio of abstractness to instability.</p>\n<br>\n\n<p>Using coupling as a metric to identify complexity in smart contracts makes sense. Anyone who’s reviewed a contract in VSCode and had to hit <em>f12</em> (“jump to definition” hotkey) five or six times only to forget where they started in the first place can surely relate to this. Excessive coupling adds complexity and layers of obfuscation.</p>\n<br>\n\n<p><em><strong>Pro tip:</strong></em> In VSCode, <em><strong>ctrl -</strong></em> takes you back up a level from where you hit <em><strong>f12.</strong></em></p>\n<br>\n\n<h4>And finally, the Halstead complexity measures…</h4>\n<p>If you’ve made it this far, congratulations! You really are a nerd ❤️. We saved the best for last. Well, if not the “best” at least the most interesting.</p>\n<br>\n\n<p>Introduced by Maurice Howard Halstead in 1977, the goal of the <a href=\"https://en.wikipedia.org/wiki/Ideal_gas_law\">Halstead complexity measures</a> is to identify measurable properties of software and the relationships between them. This is similar to, for example, the identification of physical properties of a gas (volume, mass, and pressure) and the relationships described in the <a href=\"https://en.wikipedia.org/wiki/Ideal_gas_law\">Ideal Gas Law</a>.</p>\n<br>\n\n<p>It starts by counting the number of <strong>operators</strong>. In Solidity, operators would be the language’s reserved keywords, symbols, and functions used in the contract (e.g. “if”, “require”, “return”, “+”, “=”). The <strong>operands</strong> are the objects these operators use. So in a line of code that says <em><strong>return 1</strong></em>; the operator is “return”, and the operand is “1”.</p>\n<br>\n\n<img src=\"/img/slither-print-halstead.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>All Halstead metrics are derived from these 4 core statistics of a given program (or smart contract):</p>\n<br>\n\n<div>\n\n<ul>\n<li>total operators </li>\n\n<br>\n\n<li>unique operators</li>\n\n<br>\n\n<li>total operands</li>\n\n<br>\n\n<li>unique operands</li>\n\n</ul>\n\n</div>\n\n<br>\n\n<img src=\"/img/results-of-the-halstead.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center><small> Results of the “halstead” printer run on <a href=\"https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\" target=\"_blank\">Solmate contracts.</a></small></div>\n\n<br>\n\n<p><strong>Core metrics:</strong></p>\n<p><strong>𝜂1:</strong> <em>the number of distinct operators</em></p>\n<p><strong>𝜂2:</strong> <em>the number of distinct operands</em></p>\n<p><strong>N1:</strong> <em>the total number of operators</em></p>\n<p><strong>N2:</strong> <em>the total number of operands</em></p>\n<br>\n\n<p><strong>Basic metrics:</strong></p>\n<p><strong>Program vocabulary (𝜂): 𝜂1 + 𝜂2.</strong> This is the number of unique operators and unique operands used by a contract. The minimum number of terms that must be understood to understand the code.</p>\n<br>\n\n<p><strong>Program length (N): N1 + N2.</strong> This is related to the total length of the code and directly proportional to the SLOC. In the example above, the ERC4626 contract is longer than the ERC20 it inherits from so it makes sense the Program length would be higher.</p>\n<br>\n\n<p><strong>Estimated program length: 𝜂1 * log2(𝜂1) + 𝜂2 * log2(𝜂2).</strong> This is an abstract concept that uses logarithms to reflect the idea that the cognitive effort required to understand a program increases with the number of unique elements but not linearly. It suggests that understanding each additional unique operator or operand adds less to the overall understanding effort as their number increases.</p>\n<br>\n\n<p><strong>Volume (V): N * log2(𝜂).</strong> The Volume metric attempts to measure the informational content of a program and uses logarithm to reflect the human perception of complexity, taking into account both the size and variety of the program’s elements.</p>\n<br>\n\n<p>Those are some of the basic Halstead metrics, but there’s more. Hold on to your hats, because this next set of Halstead metrics gets pretty wild.</p>\n<br>\n\n<img src=\"/img/results-of-the-halstead-solmate-2.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<div align=\"center\"><small>Results of the “halstead” printer run on<a href=\"https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\" target=\"_blank\">Solmate contracts</a></small></div>\n\n<br>\n\n<p><strong>Extended metrics</strong></p>\n<p><strong>Difficulty (D): (𝜂1 / 2) * (N2 / 𝜂2).</strong> The Difficulty metric tries to quantify the cognitive complexity involved in understanding the contract. It takes into account the ratio of unique operators to operands and their total occurrences.</p>\n<br>\n\n<p><strong>Effort (E): D * V.</strong> The Effort metric combines the difficulty of the contract with its volume, offering a theoretical measure of the total work required to understand the code.</p>\n<br>\n\n<p><strong>Time required to program (T): E / 18 (seconds).</strong> You still quoting LOEs at 250 sloc / day? That’s a boomer metric, bruh. With Halstead I can tell you exactly how long it will take to review a contract right down to the millisecond! 😉</p>\n<br>\n\n<p>Example: In the figure above, we see Halstead estimating the time for a review of the <strong>ERC1155TokenReceiver</strong> contract at 2.0 seconds. Looking at the contract below, it checks out!</p>\n<br>\n\n<img src=\"/img/Halstead-contract-2.0-token.webp\" alt=\"Alt Text\" width=\"1000\">\n\n<br>\n\n<p>And now onto the final Halstead metric, the metric to end all metrics.</p>\n<br>\n\n<p>Question: When you are reviewing code do you ever get the feeling there’s still more bugs you haven’t found? Well, fear no more, now you can know for sure!</p>\n<br>\n\n<p><strong>Number of bugs (B): (E^(2/3)) / 3000</strong></p>\n<br>\n\n<p>This metric uses the effort <strong>(E)</strong> to predict potential errors in the contract, employing a formula that scales with the two-thirds power of the effort. This estimates the likely bug density based on the other characteristics. Where do they get the 2/3 and the 3000? Don’t worry about it.</p>\n<br>\n\n<p>I feel the skepticism oozing out of your pores now. Fair. Personally, I think it’s quite interesting, but then again I was the kind of kid who took the time to learn his friend’s made-up secret language back in grade school.</p>\n<br>\n\n<p>Whether these metrics can actually provide a realistic estimate of the number of bugs a contract I will leave to the data scientists. Where I think they can be useful is in comparing one codebase against another, so let’s do that!</p>\n<br>\n\n<h4>Putting it all together</h4>\n<p>Let’s look at these metrics when applied to the <a href=\"https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Pool.sol\">UniswapV3 Pool</a>, <a href=\"https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\">Solmate ERC-20</a>, and <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\">OpenZeppelin ERC-20 </a>contracts.</p>\n<br>\n\n<img src=\"/img/ck-metrics-table.webp\" alt=\"Alt Text\" width=\"800\">\n\n<br>\n\n<p>These numbers seem to check out. The UniV3 pool contract makes 69 external calls compared with both ERC20 contracts that make 0. So we’d expect RFC to be much higher. Since most of these external calls will take extra time to review, we should increase our assessment of complexity and up the LOE for a security review by a little.</p>\n<br>\n\n<p>UniV3 is a fully derived contract, no other contracts inherit it, hence NOC of 0. Whereas the ERC20 contract in the OpenZeppelin repo is the basis for 77 other contracts. This is useful information. We can quickly see that any change to the OZ ERC20 contract will have a major impact on many other contracts and should be carefully considered. Interestingly, it’s almost a self-enforced type of immutability.</p>\n<br>\n\n<p>The DIT on these three contracts is not bad. In my experience, contracts with a DIT of 5 or 6 can be much more time consuming to review than those in the 0–2 range.</p>\n<br>\n\n<p><br>The CK Metrics seem valuable. Looking ahead, let’s skip the Martin metrics for these contracts as they are not that illuminating due to the low coupling found in all three contracts. Let’s move on to the Halstead metrics.</p>\n<br>\n\n<img src=\"/img/halstead-metrics-table.webp\" alt=\"Alt Text\" width=\"800\">\n\n<br>\n\n<p>This is also interesting. Both ERC20 contracts have similar metrics which makes sense since they are implementations of the same contract. The Solmate contract is slightly higher in Effort, Time, and Bugs which kind of checks out intuitively — more inline assembly used for gas optimization — although personally I find Solmate easier to read.</p>\n<br>\n\n<p>This is also interesting. Both ERC20 contracts have similar metrics which makes sense since they are implementations of the same contract. The Solmate contract is slightly higher in Effort, Time, and Bugs which kind of checks out intuitively — more inline assembly used for gas optimization — although personally I find Solmate easier to read.</p>\n<br>\n\n<p>The Uniswap contract is higher on all metrics which is not suprising since it’s over 5 times the length. Also, since the UniV3Pool contains more external calls we would expect a lot more operands and therefore a higher Difficulty.</p>\n<br>\n\n<p>However the gap between the metrics for the ERC-20 and the pool contracts seems quite wide. While we can all agree that reviewing the UniV3Pool contract would take more time than the simple ERC20’s, is it really 40–50x more? I think not. In this case, it would seem the formulas are either overestimating the difficulty of larger, more complex contracts, or underestimating the simpler ones.</p>\n<br>\n\n<p>As for the actual time values, they also seem a little off. I could see getting through the ERC20 contracts in half an hour if you were just reading for understanding. But when performing a security review it could easily take ten times this for the first pass. The Uniswap contract on the other hand, would probably take less than 26 hours for a read through, and 2–3 times as long for a security review.</p>\n<br>\n\n<p>The thing I’m most impressed with is that these values are not completely disjointed from reality, they seem roughly within an order of magnitude. It’s hard to draw conclusions from this one simplistic example, but they do seem to be able to express some aspects of the complexity found in the contracts.</p>\n<br>\n\n<h4>Final thoughts</h4>\n<p>When we analyze the complexity of smart contracts, we are inherently addressing security concerns. Complex code obscures logic errors and vulnerabilities. While it might be funny to “predict the number of bugs” in a code base, I think there are legitimate uses for these metrics such as identifying which contracts deserve extra scrutiny during a security review.</p>\n<br>\n\n<p>I originally developed these printers as a way to assist with determining LOEs on security reviews. It remains to be seen whether or not this will provide any valuable insight long term but it’s something I will be tracking. I’ll be sure to report back in the future if I discover any alpha. 🫡</p>\n",
    "tags": []
  },
  {
    "title": "Hunting versus Fishing: The Current State of Blockchain Security Reviews",
    "author": "Offbeat Blog",
    "date": "2024-05-27T23:21:00.000Z",
    "thumbnail": "https://miro.medium.com/v2/resize:fit:1400/format:webp/0*cNnfqZPA_yJOXbHD.png",
    "featuredText": "“Find the fucking bugs!” This is the war cry for one popular school of thought in the world of blockchain security reviews. The FTFB gang maintains the singular purpose of an “audit” is to uncover the mistakes, logic errors, and vulnerabilities that will lead to a protocol losing money, anything else is a waste of time. On the other hand, the mantra for the opposing side is “Teach a man to fish and you feed him for a lifetime.” They firmly believe in a more holistic approach. There are many areas to offer advice: development procedures, code review practices, testing frameworks. The goal is to improve the client’s security posture so they won’t produce buggy code in the first place.",
    "content": "<p>So which is right? Let’s take a closer look at these two schools of thought, their implications for the security review process, and discuss how to ensure a successful collaboration between clients and providers.</p>\n<br>\n\n<h4>First let’s talk about Team FTFB.</h4>\n<p>Since the dawn of Code4rena, the competitive audit scene has blown up and now there are multiple options like Spearbit’s Cantina, Cyfrin’s Codehawks and more. Finding bugs is precisely how you make money in these contests. It’s how you obtain fame, status, and fortune. There’s no reward offered for advice on how to tighten up the CI pipeline or write an incident response plan. FTFB or GTFO.</p>\n<div align=\"center\">\n  <a href=\"https://www.trailofbits.com/\">\n    <img src=\"/img/post6-2.webp\" alt=\"Alt Text\" width=\"1000\">\n  </a>\n\n  <a href=\"https://www.dailywarden.com//\">\n    <em>https://www.dailywarden.com/</em>\n  </a>\n</div>\n\n\n\n<br>\n\n<p>This has resulted in an army of competition specialists, highly skilled bug finders. I recently participated in a security review with Trust Security that was led by renowned contest champion, HollaDieWaldfee. What an absolute beast! Before the sun had even risen in my timezone, he had already found multiple issues, quickly targeting contracts with low test coverage. He’s living proof that there is no better way for an auditor to upskill than to compete in contests. No other audit provides an “answer key” at the end to see what you missed and how to improve for next time.</p>\n<br>\n\n<p>I recently spoke with the head of an up-and-coming security company whose business model is a pure play on this very philosophy. They hire only contest winners, and stated proudly “I want my team focused on two things, finding bugs and reviewing bugs, that’s it. No kickoffs, no unnecessary meetings, no unsolicited advice.” FTFB.</p>\n<br>\n\n<h4>Next up: the Fishing Teachers.</h4>\n<p>If you’ve ever tried to lose a few pounds, you’ve probably heard the advice “Don’t focus on losing weight; focus on living a healthy lifestyle and the weight will take care of itself.” This is the idea behind the holistic approach. Focus on the process, not the symptom.</p>\n<div align=\"center\">\n  <a href=\"https://www.trailofbits.com/\">\n    <img src=\"/img/post6-3.webp\" alt=\"Alt Text\" width=\"700\">\n  </a>\n  <br>\n  <a href=\"https://www.trailofbits.com/\">\n    <em>https://www.trailofbits.com/</em>\n  </a>\n</div>\n\n\n<p>On the home page of my “alma-mater”, Trail of Bits, it literally says “We don’t just fix bugs.” It’s their mission, ingrained in the company culture. When I was there I was taught the guiding light should always be, “What is in the best interest of the client?” Not only blockchain, but their appsec, cryptography, and AI teams are all stacked. The goal is to improve the overall security posture of clients, providing recommendations on everything from code quality to multi-sig management.\n<br></p>\n<p>Another example is Asymmetric Research who takes the holistic approach to a whole new level. Not only do they review code, but they offer business strategy services and even sit on the boards of some of their clients, directly helping to shape the company’s future. They’re not just teaching you how to fish; they teach you how to hunt, farm, and build shelter!\n<br></p>\n<p>So, which approach is better? Team Holistic will argue that if you only focus on the bugs at hand, you will never make any forward progress ~ like banging your head against a wall and expecting change. But the FTFB gang will be quick to respond, “If you don’t find all the bugs you get rekt,” and there won’t be any progress to be made, forward or otherwise.</p>\n<div align=\"center\">\n<img src=\"/img/post6-4.webp\" alt=\"Alt Text\" width=\"800\">\n</div>\n\n\n<h4>Mismatched expectations</h4>\n<p>One other note: this difference in beliefs is not limited to the providers of security review services. The consumers, which include the projects and the dev teams, also tend to fall into one camp or the other. I’ve had clients whose only concern is finding bugs and don’t want to hear anything else. I’ve also had clients who love every recommendation given (often these tend to be either newer projects just finding their way or seasoned, elite teams who are always looking to improve).</p>\n<br>\n\n\n<p>The reality is there’s no simple answer and it’s perfectly acceptable to have a preference for one or the other ~ everybody’s circumstances are different. But problems can occur, especially when client expectations are not met. Check out this amazing table:</p>\n<div align=\"center\">\n<img src=\"/img/post6-5.webp\" alt=\"Alt Text\" width=\"800\">\n</div>\n\n\n\n<p>As we can see, mismatched expectations can lead to unhappy emojis ~ when clients are looking for FTFB, but they end up getting fishing lessons…they’re gonna have a bad time. Likewise, a client expecting some holistic advice may come away disappointed if their expectations are not met.\n<br></p>\n<h4>In closing</h4>\n<p>Of course, there are many nuances and exceptions to all of this. Many providers offer a blend of FTFB and holistic, and I’ve seen FTFB specialists give out top-notch holistic advice. As with many things, most problems can be avoided with better communication. Know what you’re getting into, be crystal clear about expectations ~ especially when entering new relationships.\n<br></p>\n<p>With open communication and a shared commitment to improving security in the blockchain space, we can all work together to create a more robust and resilient ecosystem.</p>\n",
    "tags": [
      "Blockchain Security",
      " Blockchain Security Audit",
      "Ethereum Blockchain",
      " Ethereum",
      "Cybersecurity"
    ]
  }
]